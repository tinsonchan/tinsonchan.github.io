[{"title":"读书笔记-侯捷C++面向对象高级开发(上)","date":"2021-06-15T10:52:33.000Z","path":"2021/06/15/读书笔记-侯捷C-面向对象高级开发-上/","text":"已经好久没写C++了，一直在游戏前端漂浮，而技术虽然可以解决很多问题，但是一直没有沉淀下来，而感觉自己只能在游戏开发浮沉。最近和一些大佬聊天，原来自己还可以选择游戏引擎开发，而这个貌似也挺符合自己的未来的规划，一是可以继续往技术深度发展，其次就是可以在图形学这些底层更加的深入学习。因此就重新开始学习C++基础，选择了侯捷老师的课程，这里是第一部分，关于面向对象部分的内容。说到面向对象，自然而然，就会拿C++和C去对比，两者最大的不同就是C的数据和函数都是全局的，也就是说大家都可以访问，而C++则不同，函数和数据都属于类的内部，外面能不能访问要看访问等级access level，也就是public， protect， private，说到这里就会引入了面向对象的特征类，class。 侯捷老师说，我们要写正规大气的代码，所以在每一个环节都要标准。C++的文件形式有头文件(.h),标准库文件(.h)和正常的定义文件(.cpp)，我们编写一个类就会从头文件开始。一个好的编码习惯是有防卫式的代码， #ifndef __COMPLEX__ #define __COMPLEX__ class complex { private: double re, im;//复数的实部和虚部 }; #endif 这样就可以避免多个地方定义同一个类，或者同一个文件包含多次头文件，从而引发的报错。构造函数是类一个比较重要的概念 class complex { public: complex(double r = 0, double i = 0) : re(r) , im(r){} }; 当然，这里一个类可能会存在多个构造函数，也就是重载，主要是方便一个类可以通过多个方式进行初始化，而类的后面是一个初始化列表，这样可以加快参数初始化的速度。 class complex { public: double real() const { return re; } double image() const { return im; } void real(double r) { re = r; } void image(double i) { im = i;} }; 这里的代码可以看出来，这里是提供了两个方法让外面可以获取里面的实部和虚部，然后后面带上了const，主要是防止外面去修改我们类的内部的参数。这里我也写了两个方法，其实和C#的set和get方法有点像，也凸显了重载的重要性，让同一个名字发挥更大的作用。 正常来讲，构建函数都是共有的，这样主要是方便外面新建的一个对象，但是也是有特殊的 class complex { public: static complex&amp; getInstance(); void setup() { ... } private: complex(double r = 0, double i = 0) : re(r), im(r){} }; complex&amp; complex::getInstance() { static complex comp; return comp; } 我们可以通过这种方式实现了单例模式。这里也存在一个特殊的字符，类名后面带上&amp;，这个是C++的一个特殊用法，引用，和指针的用法有点像，但是我们不用像指针那样处理各种繁琐的东西，但是用起来很方便。侯捷老师建议我们尽量用引用，这样就可以加快传递的速度了。但是也不是说随便使用的，像下面的例子： class complex { public: complex&amp; operator += (const complex&amp; r); }; inline complex&amp; complex::operator += (const complex&amp; r) { this-&gt;re += r.re; this-&gt;im += r.im; return *this; } inline complex operator + (const complex&amp; lhs, const complex&amp; rhs) { return complex(lhs.re + rhs.re, lhs.im + rhs.im); } 这里用了几个方法描述了引用和非引用的区别,你看下面的返回值就不能用引用，为啥呢，因为里面的变量是临时产生的，在函数结束之后就会触发了对象被回收，自然外面也就没有了，所以只能通过值来传递了。这里我们的实例是操作符重载，这里也可以说是C++比较重要的内容，你看我们自定义的类，如果可以通过操作符重载，就可以实现值相加，或者判定两个对象是否相等了。这里还引出了一个关键字”inline”，这个主要是为了加快编译的速度，但是这里只是声明而已，最后能不能作为内联函数，还是要看编译器自己的决定的，里面不能有过于复杂的内容。 我们这里的实例complex里面没有指针，所以是没有问题的，但是看接下来的一个有指针的类String class String { public: String(const char* cstr = 0); String(const String&amp; r); String&amp; operator = (const String&amp; str); ~String(); private: char* m_data; } 这里引入了C++的三个特殊函数，也叫Big Three，也就是拷贝构造函数，拷贝赋值函数，还有析构函数。这里主要是因为存在指针的话，如果我们没有重写这三个函数，就会单纯的拷贝了m_data，这时候两个不同的对象里面的值是一样的，这样下来就是如果改变一个值，另一个也会被改变，这样就达不到两个对象的目的了。这里也引入一个新的概念，深拷贝和浅拷贝。 写程序的都知道，我们的程序的内存分两部分，一部分是栈的，另一部分就是堆。这两个的区别是，栈是程序自动分配的，存在于某个作用域的，也就是我们一个作用域内的参数，局部变量，还有返回值都会在栈内，而我们通过代码new出来的对象，则是在堆内生成的。 侯捷老师也给我们分析了一个类在内存上的表现，一个类除了自身的数据大小，还会包含头和尾两个cooking，一共是4x2个字节，而内存主要是以16进制来表示的，如果不够十六的倍数，则会往最近的16的倍数靠近。另外就是我们会生成数组，所以生成的内存，会有4个字节来存储数组的大小，当然，我们也是要按照顺序去销毁的，否则就会造成了内存泄漏。 最后，侯捷老师给我们讲了面向对象的特性： Composition-is a Delegation-指针版本的Composition Inheritance","link":"","tags":[{"name":"c++","slug":"c","permalink":"https://tinsonchan.github.io/tags/c/"}]},{"title":"如何建立一个在多台机器上可维护的github博客","date":"2021-06-14T12:38:37.000Z","path":"2021/06/14/如何建立一个在多台机器上可维护的github博客/","text":"前几天跟着网上的教程，已经把博客搭建起来了。但是考虑到自己有一台主机和一台笔记本，如果能做到随时随地的写博客，而不用一定要回到家里才能过写，那才是真正的方便。而且，这样有利于把整个博客工程备份起来，不然如果哪一天出问题了，那就后悔都来不及了，因为你已经找不回自己的文件了。 当然百度是无所不能的，能够解决你在技术上的一切问题。而记录此篇文章，纯粹是为了以后可以自己翻查，重新再次部署时可以快速切入，而不用再一点点的边度了。 本文主要为分为几部分，一一描述。 单机博客安装环境准备1.Node.js https://nodejs.org/en/ 一般选择LTS版本 2.git https://git-scm.com/ 这是git官网，windows需要自己去下载，而mac则是自带的 hexo安装1.安装hexo 这是windows的命令行 npm install -g hexo mac则使用下面的命令行 sudo npm install -g hexo 2.初始化hexo 以下这个命令行可以初始化整个hexo的工程 hexo init 这个是启动网页服务器，方便你在本地查看的效果 hexo s 3.上传到github 先要安装上传的插件 npm install hexo-deployer-git --save 然后调用以下命令行就可以了 hexo d -g github备份接下来这部分就是把整个工程在github上备份，然后就可以在其他机器同步，这样每次想写博客的时候，都去pull一份最新的工程，然后直接在上面修改就可以了。 创建分支1.checkout 你的github工程 git clone git@github.com:tinsonchan/tinsonchan.github.io.git 2.创建分支 git branch hexo 3.切换分支 git checkout hexo 4.提交到github git add . git commit -m &apos;back up hexo files&apos; git push --set-upstream origin hexo 5.修改github的默认分支因为默认是master分支，但是我们的博客目录是在master，而我们是把工程放在branch hexo的，所以需要到GitHub上面修改一下 主要是到下面这个地址去修改 https://github.com/tinsonchan/tinsonchan.github.io/settings/branches 编写新的日志 git pull -更新日志目录 hexo new “内容标题” 编辑 博客内容 hexo d -g -生成博客网页内容 git add . -添加版本管理 git commit -m “提交版本内容” git push -更新到远程库 修改 2018-08-16在博客中增加图片 直接把图片放在source/images下面 (/images/image.jpg) 修改配置 //_config.yml post_asset_folder: true //图片路径 image.jpg 结束完成以上步骤之后，我们就把整个工程备份到网络上了，然后再其他机器上只需要完成单机博客安装就可以了。 追求卓越 成功就会在不经意间追上你","link":"","tags":[{"name":"github","slug":"github","permalink":"https://tinsonchan.github.io/tags/github/"}]},{"title":"重新起航","date":"2021-06-12T13:20:07.000Z","path":"2021/06/12/重新起航/","text":"这个博客建了好几年，但是好像貌似始终没有养成写博客的习惯。最近，基于疫情，也考虑了一下自身的情况，决定离开公司，重新回归技术的道路。后面的博客主要是以未来几年的技术栈展开，逐步记录自己的生活，主要包含几部分：一、游戏引擎开发的内容二、自己技术知识体系的记录三、自己的读书笔记四、记录自己的一些规划以及复盘五、让自己养成写博客的习惯，争取每周至少两篇的输出。 追求卓越 成功就会在不经意间追上你","link":"","tags":[]}]